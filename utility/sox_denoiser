#!/bin/env python

# DocOpt __doc__ string to generate command line interface

"""sox_denoiser

Usage:
    sox_denoiser [options] scan <dir_path> <ext> [<exclude_expr>]
    sox_denoiser [options] [<file_path>...]

Arguments:
    <file_path>...              List of files to denoise

Options:
    -b, --noise-start=<time>    Starting point for noise profile selection; in seconds [default: 0]
    -e, --noise-end=<time>      Ending point for noise profile selection; in seconds [default: 5]
    -p, --play                  Plays output instead of saving to file
    --noise-reduction=<float>   Reduce noise by a percentage amount; ex. 0.2 or 20% [default: .2]
    --verbose=<level>           Verbosity, the more v's the more verbose; ex. --verbose=v [default: vvvv]
    --overwrite                 Overwrite existing processed files when redoing denoiser on same file
"""
# Omitted for now
# Commands:
    # scan <dir_path>             Scans a directory <dir_path> for files with extension <ext> to denoise


# Useful imports
import os
import sys
import glob
import logging
import re

# Necessary imports
import os.path as pt
import tempfile as tp
import subprocess
import shlex

# Custom function import
from docopt import docopt
from logging import debug, info, warning, error, critical
from subprocess import run as sp_run
from shlex import split

# Global logger var
lg = logging.getLogger(__name__)

# Initialize things like the logger
def init(args):
    log_format = '%(asctime)s %(message)s'
    log_level = get_level(args["--verbose"])
    
    logging.basicConfig(level=log_level, format=log_format)

# Main functionality
def run(args):
    if not pt.isfile("/bin/sox"):
        critical(f"SoX is not installed in the /bin directory, exiting")
        exit(1)
    
    path_list = []

    if args["scan"]:
        # setup path and ext vars
        scan_path = pt.abspath(args["<dir_path>"])
        ext = args["<ext>"]

        # apply cli provided filter expression
        path_list = glob.glob(f"{scan_path}/*.{ext}")
        if filter_expr := args["<exclude_expr>"]:
            re_prog = re.compile(filter_expr)
            path_list = list(filter(lambda e: not re_prog.search(e), path_list))
    
        # default, remove already processed files with "_processed" signature
        path_list = list(filter(lambda e: not re.search(f".*_processed\.{ext}", e), path_list))
        
        # check if paths are being filtered correctly
        debug(path_list)
    else:
        # process audio files using a list of file paths given, does not do filter checks
        path_list = args["<file_path>"]

    # process audio files
    for p in path_list:
        process_audio_file(args, p)

def process_audio_file(args, file_path):
    path_wo_ext, ext = pt.splitext(file_path) # extension include the dot
    # create new file path
    new_audio_path = f"{path_wo_ext}_processed{ext}"

    # check if file a processed file exists for audio file
    if pt.isfile(new_audio_path) and args["--overwrite"]:
        warning(f"{new_audio_path} already exists, skipping")
        return False

    # sox denoise settings
    start_trim = args["--noise-start"]
    end_trim = args["--noise-end"]
    noise_reduction_amount = args["--noise-reduction"]

    # create a temporary directory to store intermediate files
    with tp.TemporaryDirectory() as audio_staging:
        np_audio_path = pt.join(audio_staging, f"test_noise.{ext}")
        np_profile_path = pt.join(audio_staging, "test_noise.profile")
        temp_audio_path = pt.join(audio_staging, f"denoised_audio.{ext}")

        # extract noise clip
        c_proc = rc(f"sox {file_path} {np_audio_path} trim {start_trim} {end_trim}")
        # create noise profile for file
        c_proc = rc(f"sox {np_audio_path} -n noiseprof {np_profile_path}")
        # apply noise profile
        c_proc = rc(f"sox {file_path} {temp_audio_path} noisered {np_profile_path} {noise_reduction_amount}")
        # normalize audio
        c_proc = rc(f"sox --norm=-0.1 {temp_audio_path} {new_audio_path}")

    return True


def rc(command):
    """Uses subprocess.run with shlex.split to run terminal commands"""

    proc = sp_run(split(command), text=True, capture_output=True)

    if proc.returncode != 0:
        critical(f"Failed to run command \"{command}\", returned error code: {proc.returncode}")
    else:
        return proc

def get_level(verbose_level):
    """Calculates a value between 0 and 50 based on how many v's or any character is provided"""

    v_num = 50 - (len(verbose_level) * 10)

    if v_num > 50:
        return 50
    elif v_num < 0:
        return 0
    else:
        return v_num

def main(args):
    init(args)
    run(args)

if __name__ == "__main__":
    args = docopt(__doc__)
    main(args)
